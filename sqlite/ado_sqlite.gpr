with "ado_config";
with "ado";

project Ado_Sqlite is
   Version := Ado.Version;
   Library_Dir := Ado.Library_Dir;

   type Yes_No is ("yes", "no");

   Use_SqlCipher : Yes_No := external ("ADO_USE_SQLCIPHER", "no");

   Library_Type : Ado_Config.Library_Type_Type := external ("ADO_LIBRARY_TYPE", "static");

   for Library_Name use "ado_sqlite";
   for Library_Kind use Library_Type;
   for Library_Version use "lib" & Project'Library_Name & ".so." & Version;
   for Library_Options use ();
   for Source_Dirs use ("src");

   for Library_Dir use "../lib/ado_sqlite/" & Project'Library_Kind;
   for Object_Dir use "../obj/ado_sqlite/" & Project'Library_Kind;

   package Naming is
      case Use_SqlCipher is
         when "yes" =>
            for Specification ("ADO.Sqlite.Runtime")
               use "ado-sqlite-runtime__sqlcipher.ads";

         when "no" =>
            for Specification ("ADO.Sqlite.Runtime")
               use "ado-sqlite-runtime__sqlite3.ads";

      end case;
   end Naming;

   case Library_Type is
      when "relocatable" =>
        case Use_SqlCipher is
	   when "yes" =>
              for Library_Options use ("-lsqlcipher");
	   when "no" =>
              for Library_Options use ("-lsqlite3");
        end case;

      when others =>
        null;
   end case;

   --  For a shared library, we want the library to be initialized automatically
   --  (Library_Auto_Init = true).  The 'gnatmake' tool invokes 'gnatbind' correctly
   --  and the pragma Linker_Constructor (ada_adoinit) is generated.  However, when using
   --  'gprbuild', this is not the case and we have to force that with the
   --  'gnatbind' option "-a".  For a static link library, the following is not used.
   package Binder is
       for Default_Switches ("Ada") use Ado_Config.Binder'Default_Switches ("Ada") & ("-a");
   end Binder;

   package Builder renames Ado_Config.Builder;
   package Compiler renames Ado_Config.Compiler;

end Ado_Sqlite;
